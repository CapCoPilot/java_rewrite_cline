/*
 * This source file was generated by the Gradle 'init' task
 */
package com.javarewrite;

import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.io.TempDir;

import java.io.IOException;
import java.nio.file.Files;
import java.nio.file.Path;
import java.util.List;

import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.junit.jupiter.api.Assertions.assertTrue;

class AppTest {
    
    @TempDir
    Path tempDir;
    
    @Test
    void testMethodReplacerListMethods() throws IOException {
        // Create a test Java file
        Path sourceFile = tempDir.resolve("TestClass.java");
        String sourceCode = """
            package com.test;
            
            public class TestClass {
                /**
                 * This is a test method with a comment
                 */
                public void testMethod1() {
                    System.out.println("Test method 1");
                }
                
                public int testMethod2(int a, int b) {
                    return a + b;
                }
            }
            """;
        Files.writeString(sourceFile, sourceCode);
        
        // Test listing methods
        MethodReplacer replacer = new MethodReplacer();
        List<String> methods = replacer.listMethods(sourceFile.toString());
        
        assertEquals(2, methods.size(), "Should find 2 methods");
        assertTrue(methods.contains("testMethod1"), "Should find testMethod1");
        assertTrue(methods.contains("testMethod2"), "Should find testMethod2");
    }
    
    @Test
    void testMethodReplacement() throws IOException {
        // Create a test Java file
        Path sourceFile = tempDir.resolve("TestClass.java");
        String sourceCode = """
            package com.test;
            
            public class TestClass {
                /**
                 * This is a test method with a comment
                 */
                public void testMethod1() {
                    System.out.println("Test method 1");
                }
                
                public int testMethod2(int a, int b) {
                    return a + b;
                }
            }
            """;
        Files.writeString(sourceFile, sourceCode);
        
        // Replace a method
        MethodReplacer replacer = new MethodReplacer();
        String newMethodCode = """
            public void testMethod1() {
                System.out.println("Modified test method 1");
                System.out.println("With an extra line");
            }
            """;
        
        boolean success = replacer.replaceMethod(
            sourceFile.toString(),
            "TestClass",
            "testMethod1",
            newMethodCode
        );
        
        assertTrue(success, "Method replacement should succeed");
        
        // Read the modified file and check if the method was replaced
        String modifiedSource = Files.readString(sourceFile);
        assertTrue(modifiedSource.contains("Modified test method 1"), 
                   "Modified source should contain the new method body");
        assertTrue(modifiedSource.contains("With an extra line"), 
                   "Modified source should contain the new method body");
        assertTrue(modifiedSource.contains("This is a test method with a comment"), 
                   "Comments should be preserved");
    }
}
